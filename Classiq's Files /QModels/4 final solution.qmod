qfunc simulate_pauli_noise(q: qbit) {
  RX<0.0677>(q);
  RY<0.0517>(q);
  RZ<0.0549>(q);
}

qfunc noisy_CX(control: qbit, target: qbit) {
  CX(control, target);
  simulate_pauli_noise(target);
  RX<0.0>(target);
  RY<0.0>(target);
  RZ<0.0>(target);
}

qfunc trotter_step(arr: qbit[]) {
  apply_to_all<lambda(q) {
    RX<0>(q);
  }>(arr);
  apply_to_all<lambda(q) {
    invert {
      S(q);
    }
  }>(arr);
  within {
    RY<1.5708>(arr[1]);
  } apply {
    noisy_CX(arr[0], arr[1]);
  }
  within {
    RY<1.5708>(arr[3]);
  } apply {
    noisy_CX(arr[2], arr[3]);
  }
  within {
    RY<1.5708>(arr[5]);
  } apply {
    noisy_CX(arr[4], arr[5]);
  }
  within {
    RY<1.5708>(arr[7]);
  } apply {
    noisy_CX(arr[6], arr[7]);
  }
  apply_to_all<lambda(q) {
    invert {
      S(q);
    }
  }>(arr);
  within {
    RY<1.5708>(arr[2]);
  } apply {
    noisy_CX(arr[1], arr[2]);
  }
  within {
    RY<1.5708>(arr[4]);
  } apply {
    noisy_CX(arr[3], arr[4]);
  }
  within {
    RY<1.5708>(arr[6]);
  } apply {
    noisy_CX(arr[5], arr[6]);
  }
  within {
    RY<1.5708>(arr[7]);
  } apply {
    noisy_CX(arr[0], arr[7]);
  }
}

qfunc trotterized_time_evolution(arr: qbit[]) {
  trotter_step(arr);
  trotter_step(arr);
  trotter_step(arr);
  trotter_step(arr);
}

qfunc main(output expectation_value: qbit) {
  reg: qbit[];
  allocate<8>(reg);
  allocate<1>(expectation_value);
  within {
    hadamard_transform(expectation_value);
  } apply {
    control (expectation_value) {
      trotterized_time_evolution(reg);
    }
  }
}

